---
import type { CollectionEntry } from 'astro:content';
import { intervalToDuration } from 'date-fns';

import { Icon } from '@/components/icon';
import Img from '@/components/img.astro';
import Details from '@/pdf/components/details.astro';
import RenderedContent from '@/pdf/components/rendered-content.astro';
import type { ContextSlice } from '@/types/context';
import { getGlobalContext } from '@/utils/get-global-context';
import { joinNonEmpty } from '@/utils/join-non-empty';

interface Props {
  basicsEntry: CollectionEntry<'basics'>;
}

const {
  basicsEntry: { data: basics, body, render },
} = Astro.props;

const context = getGlobalContext<ContextSlice<'website'>>(Astro);

const details = [
  basics.birthdate && {
    label: 'Age',
    value: `${intervalToDuration({ start: basics.birthdate, end: new Date() }).years} years`,
  },
  basics.email && { label: 'Email', value: `[${basics.email}](mailto:${basics.email})` },
  basics.phone && { label: 'Phone', value: `[${basics.phone}](tel:${basics.phone})` },
  (basics.city || basics.country) && { label: 'Location', value: joinNonEmpty([basics.city, basics.country], ', ') },
  ...(basics.details || []),
].filter(Boolean);
---

<section class="grid gap-4">
  <div class="flex flex-row items-start">
    {
      basics.image && (
        <Img
          loading="eager"
          class="size-24 h-fit rounded-xl"
          src={basics.image}
          alt={basics.name}
          width={200}
          height={200}
        />
      )
    }
    <div class="ml-4 space-y-0.5 self-center text-left">
      <h1 class="text-3xl font-black text-color-text-title">{basics.name}</h1>
      <h2 class="text-xl font-medium text-color-text-title">{basics.label}</h2>
      {
        context.website && (
          <a href={context.website} class="text-lg text-color-text-primary underline">
            {new URL(context.website).host}
          </a>
        )
      }
    </div>
    <div class="ml-auto flex gap-3">
      {
        basics.socials.map((social) => (
          <a
            aria-label={social.label}
            href={social.url}
            class="flex size-9 items-center justify-center rounded bg-color-bg-main"
          >
            <Icon class="size-4 text-color-icon-dark" name={social.icon} />
          </a>
        ))
      }
    </div>
  </div>
  {body.trim().length > 0 && <RenderedContent {render} />}
  {details.length > 0 && <Details {details} />}
</section>
