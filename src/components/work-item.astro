---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import { getEntries } from 'astro:content';

import { context } from '@/context';
import { markdownToHtml } from '@/utils/markdown-to-html';

import Linkable from './linkable.astro';
import SkillTag from './skill-tag.astro';

interface Props {
  workEntry: CollectionEntry<'work'>;
}

const {
  workEntry: { data: work, render: renderWork },
} = Astro.props;

const { Content } = await renderWork();

const startDate = context.formatDate(work.startDate);
const endDate = work.endDate ? context.formatDate(work.endDate) : 'Current';
const skillEntries = (work.skills ? await getEntries(work.skills) : []).map((entry) => ({
  ...entry,
  body: '',
}));
---

<div>
  <div class="flex items-start">
    {
      work.organization.image && (
        <Image
          class="mr-4 hidden size-20 rounded sm:block lg:size-14"
          src={work.organization.image}
          alt={work.organization.name}
          width={112}
          height={112}
        />
      )
    }
    <div class="flex w-full flex-col-reverse items-start justify-between lg:flex-row">
      <div>
        <h3 class="text-lg font-bold text-slate-900 sm:text-xl">
          {work.position}
        </h3>
        <Linkable class="text-base font-semibold text-slate-700 sm:text-lg" href={work.organization.url}>
          {work.organization.name}</Linkable
        >
      </div>
      <div class="w-fit whitespace-nowrap rounded text-sm font-semibold lg:bg-slate-800 lg:px-2 lg:py-1 lg:text-white">
        {startDate} - {endDate}
      </div>
    </div>
  </div>
  {
    work.details && (
      <dl class="mt-4 flex flex-wrap gap-x-6 text-sm sm:text-base">
        {work.details.map((detail) => (
          <div class="flex flex-wrap">
            <dt class="pr-1 font-semibold text-slate-900 after:content-[':']">{detail.label}</dt>
            <dd class="text-slate-700 hover:[&_a]:underline" set:html={markdownToHtml(detail.value)} />
          </div>
        ))}
      </dl>
    )
  }
  <div class="prose prose-sm prose-slate mt-3 max-w-none text-justify sm:prose-base prose-ul:ps-4"><Content /></div>
  {
    skillEntries.length > 0 && (
      <div class="mt-4 flex flex-col gap-1">
        <div class="text-sm font-semibold text-slate-900 sm:text-base">Related skills:</div>
        <div class="flex flex-wrap gap-3">
          {skillEntries.map((skillEntry) => (
            <SkillTag skillEntry={skillEntry} />
          ))}
        </div>
      </div>
    )
  }
</div>
