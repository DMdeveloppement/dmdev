---
import type { ComponentProps } from 'astro/types';
import { Icon as AstroIcon } from 'astro-icon/components';

import { getElementAttributes } from '@/utils/element-attributes';
import { removeTopElement } from '@/utils/remove-top-element';

interface Props extends ComponentProps<typeof AstroIcon> {
  name: string;
}

const { name, ...props } = Astro.props;

async function getIconData() {
  /** Is a path of an icon placed in src/icons. */
  const isLocalIcon = !name.includes(':');

  /** Is a name of an icon that needs to be fetched. */
  const isRemoteIcon = name.includes(':') && name.split(':').length === 2;

  if (!isLocalIcon && !isRemoteIcon) {
    throw new Error(
      `Invalid icon name: ${name}. Remote icons must be in "set:icon" format. Local icons cannot contain ":" in their name.`,
    );
  }

  if (isLocalIcon) {
    return { name, props };
  }

  const [set, icon] = name.split(':') as [string, string];
  const svg = await fetch(`https://api.iconify.design/${set}/${icon}.svg`).then((res) => res.text());

  return {
    props: { ...getElementAttributes(svg), ...props },
    content: removeTopElement(svg),
  };
}

const data = await getIconData();
---

{
  data.name ? (
    <AstroIcon name={data.name} {...props} />
  ) : (
    <svg {...data.props}>
      <Fragment set:html={data.content} />
    </svg>
  )
}
