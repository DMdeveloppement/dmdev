---
import type { CollectionEntry } from 'astro:content';

import { cn } from '@/utils/cn';

import Icon from './icon.astro';
import Linkable from './linkable.astro';
import Popover from './popover.astro';

interface Props {
  skillEntry: CollectionEntry<'skills'>;
}

const {
  skillEntry: { data: skill, body: skillBody, render: renderSkill },
} = Astro.props;

if (!skill.level) {
  throw new Error(`Skill "${skill.name}" is missing a "level" field.`);
}

const [level, maxLevel] = skill.level.split('/').map(Number) as [number, number];
const Description = skillBody.trim().length > 0 && (await renderSkill()).Content;

// Icon height + margin must equal text line height so they align properly.
const iconClass = cn('my-0.5 size-4 sm:my-1');
const textClass = cn('text-sm font-medium text-slate-700 sm:text-base');
---

<div class="flex flex-col gap-1.5" style={skill.color && { color: skill.color }}>
  <div class="flex items-start gap-1.5">
    {skill.icon && <Icon name={skill.icon} class={iconClass} />}
    <Linkable class={textClass} href={skill.url}>
      {skill.name}
    </Linkable>
    {
      Description && (
        <Popover>
          <button slot="trigger" class="ml-auto">
            <Icon
              name="fa6-solid:circle-info"
              class={cn(iconClass, 'text-slate-400 transition-colors hover:text-slate-400/80')}
            />
          </button>
          <div
            slot="popover"
            class="prose max-w-96 rounded-lg border border-slate-200 bg-white px-4 py-3 text-slate-700 shadow-md"
          >
            <Description />
          </div>
        </Popover>
      )
    }
  </div>
  <div>
    <div class="flex gap-1">
      {
        Array.from({ length: maxLevel }, (_, i) => (
          <div class={`h-1.5 flex-1 rounded-sm sm:h-2 ${i < level ? 'bg-slate-500' : 'bg-slate-200'}`} />
        ))
      }
    </div>
  </div>
</div>
