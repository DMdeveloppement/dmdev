---
import type { ComponentProps } from 'astro/types';
import type { CollectionEntry } from 'astro:content';

import DateRange from '@/components/date-range.astro';
import type { Configurable } from '@/utils/configurable';
import { shouldDisplay } from '@/utils/configurable';
import { markdownToHtml } from '@/utils/markdown-to-html';
import { removeTopElement } from '@/utils/remove-top-element';
import Details from '@/web/components/details.astro';
import Img from '@/web/components/img.astro';
import RenderedContent from '@/web/components/rendered-content.astro';
import { RelatedSkills } from '@/web/components/skills';

interface Props {
  entry: CollectionEntry<'projects'> | Promise<CollectionEntry<'projects'>>;
  relatedSkills?: Configurable<Pick<ComponentProps<typeof RelatedSkills>, 'label' | 'include' | 'exclude'>>;
}

const { entry, relatedSkills } = Astro.props;
const { data: project, body, render } = await entry;
---

<div>
  <div class="mb-5 flex items-start gap-4">
    {
      project.image && (
        <Img
          class="hidden size-20 rounded object-contain sm:block"
          src={project.image}
          alt={project.name}
          width={160}
          height={160}
        />
      )
    }
    <div>
      <div class="flex gap-1.5">
        {
          project.image && (
            <Img
              class="my-1 size-5 rounded object-contain sm:hidden"
              src={project.image}
              alt={project.name}
              width={40}
              height={40}
            />
          )
        }
        <h3 class="text-lg font-bold text-color-text-title sm:text-xl">
          {project.name}
        </h3>
      </div>
      <div
        class="text-sm font-medium text-color-text-title sm:text-base"
        set:html={removeTopElement(markdownToHtml(project.description))}
      />
      <DateRange
        class="text-sm font-normal text-color-text-primary sm:text-base"
        startDate={project.startDate}
        endDate={project.endDate}
      />
    </div>
  </div>
  {project.details && <Details class="mb-3" details={project.details} />}
  {body.trim().length > 0 && <RenderedContent {render} />}
  {
    project.skills && shouldDisplay(relatedSkills) && (
      <RelatedSkills class="mt-5" skillRefs={project.skills} {...relatedSkills} />
    )
  }
</div>
